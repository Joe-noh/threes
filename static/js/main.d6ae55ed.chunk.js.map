{"version":3,"sources":["pages/index.tsx","hooks/full-size.ts","pages/basic-geometries.tsx","assets/gltf/suzanne.gltf","lib/loading-screen.ts","pages/suzanne.tsx","pages/clock.tsx","assets/gltf/bone.gltf","pages/bone.tsx","pages/can.tsx","pages/cloth.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Index","style","margin","href","useFullSize","useState","width","setWidth","height","setHeight","useEffect","window","innerWidth","innerHeight","BasicGeometries","antialias","adaptToDeviceRatio","canvasId","clearColor","Color4","FromHexString","name","target","Vector3","Zero","alpha","Math","PI","beta","upperBetaLimit","radius","lowerRadiusLimit","upperRadiusLimit","direction","Up","setDirectionToTarget","position","intensity","mapSize","shadowCasters","useBlurExponentialShadowMap","blurKernel","diffuseColor","Color3","thickness","tessellation","receiveShadows","LoadingScreen","loadingUIBackgroundColor","loadingUIText","Suzanne","canvasElement","useRef","engine","Engine","current","loadingScreen","setSize","SceneLoader","Load","suzanne","undefined","scene","camera","ArcRotateCamera","attachControl","HemisphericLight","diffuse","White","runRenderLoop","render","addEventListener","resize","ref","Clock","Scene","light1","light2","PointLight","wallMaterial","StandardMaterial","specularColor","Black","wall1","MeshBuilder","CreateBox","depth","material","wall2","floor","clockBody","CreateCylinder","diameter","rotation","longHand","setPivotPoint","shortHand","tick","now","Date","hour","getHours","minute","getMinutes","longHandRotation","shortHandRotation","x","setTimeout","Bone","bone","mesh","getMeshByName","skeleton","angle","trasformNode","bones","getBoneIndexByName","getTransformNode","registerBeforeRender","Quaternion","FromEulerAnglesToRef","sin","cos","rotationQuaternion","light","groundColor","Can","pbr","faceUV","Vector4","faceColors","PBRMetallicRoughnessMaterial","metallic","roughness","className","type","accept","onChange","event","reader","FileReader","file","files","data","result","toString","baseTexture","Texture","readAsDataURL","Cloth","onload","a","Ammo","enablePhysics","AmmoJSPlugin","Down","dirLight","DirectionalLight","cloth","CreateGround","subdivisions","clothMaterial","y","physicsImpostor","PhysicsImpostor","ClothImpostor","mass","damping","friction","restitution","velocityIterations","positionIterations","stiffness","sphere","CreateSphere","sphereMaterial","z","SphereImpostor","shadowGenerator","ShadowGenerator","addShadowCaster","ground","groundMaterial","BoxImpostor","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ae55ed.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Index() {\n  return (\n    <ul style={{ margin: '2rem' }}>\n      <li><a href=\"/threes/#/basic-geometries\">Basic Geometries</a></li>\n      <li><a href=\"/threes/#/suzanne\">Suzanne</a></li>\n      <li><a href=\"/threes/#/clock\">Clock</a></li>\n      <li><a href=\"/threes/#/bone\">Bone</a></li>\n      <li><a href=\"/threes/#/can\">Can</a></li>\n      <li><a href=\"/threes/#/cloth\">Cloth</a></li>\n    </ul>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport function useFullSize() {\n  const [width, setWidth] = useState(0)\n  const [height, setHeight] = useState(0)\n\n  useEffect(() => {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight)\n  }, [])\n\n  return { width, height }\n}\n","import React from 'react'\nimport { Engine, Scene } from 'react-babylonjs'\nimport { Vector3, Color3, Color4 } from '@babylonjs/core'\nimport { useFullSize } from '../hooks/full-size'\n\nexport default function BasicGeometries() {\n  const { width, height } = useFullSize()\n\n  return (\n    <Engine antialias adaptToDeviceRatio canvasId='babylon' width={width} height={height}>\n      <Scene clearColor={Color4.FromHexString('#12345678')}>\n        <arcRotateCamera\n          name=\"camera\"\n          target={Vector3.Zero()}\n          alpha={Math.PI / 3}\n          beta={Math.PI / 4}\n          upperBetaLimit={Math.PI / 2}\n          radius={10}\n          lowerRadiusLimit={5}\n          upperRadiusLimit={20}\n        />\n\n        <hemisphericLight name='light1' direction={Vector3.Up()} />\n        <directionalLight name='light2' setDirectionToTarget={[Vector3.Zero()]} direction={Vector3.Zero()} position={new Vector3(5, 10, 5)} intensity={0.5}>\n          <shadowGenerator mapSize={1024} shadowCasters={['box', 'sphere', 'torus']} useBlurExponentialShadowMap blurKernel={8} />\n        </directionalLight>\n\n        <box name='box' position={new Vector3(-1, 0.5, -1)}>\n          <standardMaterial name='boxMaterial' diffuseColor={Color3.FromHexString('#0b6623')} />\n        </box>\n        <sphere name='sphere' position={new Vector3(0, 0.5, 2)}>\n          <standardMaterial name='sphereMaterial' diffuseColor={Color3.FromHexString('#ff0000')} />\n        </sphere>\n        <torus name='torus' thickness={0.5} tessellation={32} position={new Vector3(2, 0.25, -1)}>\n          <standardMaterial name='torusMaterial' diffuseColor={Color3.FromHexString('#0000ff')} />\n        </torus>\n\n        <ground name='ground' width={10} height={10} receiveShadows>\n          <standardMaterial name='groundMaterial' diffuseColor={Color3.FromHexString('#3bb143')} />\n        </ground>\n      </Scene>\n    </Engine>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/suzanne.cad217e3.gltf\";","import { ILoadingScreen } from '@babylonjs/core'\n\nexport class LoadingScreen implements ILoadingScreen {\n  public loadingUIBackgroundColor: string = '#fff'\n  public loadingUIText: string = ''\n\n  public displayLoadingUI() {\n    return null\n  }\n\n  public hideLoadingUI() {\n    return null\n  }\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Engine, SceneLoader, HemisphericLight, ArcRotateCamera, Vector3, Color3 } from '@babylonjs/core'\nimport '@babylonjs/loaders/glTF'\nimport suzanne from '../assets/gltf/suzanne.gltf'\nimport { LoadingScreen } from '../lib/loading-screen'\nimport { useFullSize } from '../hooks/full-size'\n\nexport default function Suzanne() {\n  const { width, height } = useFullSize()\n\n  const canvasElement = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const engine = new Engine(canvasElement.current, true)\n    engine.loadingScreen = new LoadingScreen()\n    engine.setSize(width, height)\n\n    SceneLoader.Load(suzanne, undefined, engine, (scene) => {\n      const camera = new ArcRotateCamera(\"camera\", Math.PI / 2,  Math.PI / 2, 10, Vector3.Zero(), scene)\n      camera.lowerRadiusLimit = 2\n      camera.upperRadiusLimit = 20\n      camera.attachControl(canvasElement.current, true)\n\n      const light = new HemisphericLight(\"light\", new Vector3(-1, 1, 0), scene);\n      light.diffuse = Color3.White()\n\n      engine.runRenderLoop(() => {\n        scene.render()\n      })\n    })\n\n    window.addEventListener('resize', () => {\n      engine.resize()\n    })\n  })\n\n  return (\n    <canvas ref={canvasElement} />\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Engine, Scene, HemisphericLight, PointLight, ArcRotateCamera, MeshBuilder, StandardMaterial, Vector3, Color3 } from '@babylonjs/core'\nimport { useFullSize } from '../hooks/full-size'\n\nexport default function Clock() {\n  const { width, height } = useFullSize()\n\n  const canvasElement = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const engine = new Engine(canvasElement.current, true)\n    engine.setSize(width, height)\n\n    const scene = new Scene(engine)\n\n    const camera = new ArcRotateCamera(\"Camera\", -3 * Math.PI / 4, Math.PI / 3, 20, new Vector3(0, 0.5, 0), scene)\n    camera.lowerRadiusLimit = 20\n    camera.upperRadiusLimit = 20\n    camera.attachControl(canvasElement, true)\n\n    const light1 = new HemisphericLight(\"light1\", new Vector3(-2.5, 10, 0), scene)\n    light1.diffuse = Color3.White()\n    light1.intensity = 0.4\n\n    const light2 = new PointLight(\"light2\", new Vector3(-2.5, 5, 0), scene)\n    light2.diffuse = Color3.White()\n    light2.intensity = 0.5\n\n    const wallMaterial = new StandardMaterial('wallMaterial', scene)\n    wallMaterial.specularColor = Color3.Black()\n\n    const wall1 = MeshBuilder.CreateBox('wall1', { width: 5, height: 5, depth: 1 }, scene)\n    wall1.position = new Vector3(0, 2, 2)\n    wall1.material = wallMaterial\n\n    const wall2 = MeshBuilder.CreateBox('wall2', { width: 1, height: 5, depth: 5 }, scene);\n    wall2.position = new Vector3(2, 2, 0)\n    wall2.material = wallMaterial\n\n    const floor = MeshBuilder.CreateBox('floor', { width: 5, height: 1, depth: 5 }, scene);\n    floor.position = new Vector3(0, 0, 0)\n    floor.material = wallMaterial\n\n    const clockBody = MeshBuilder.CreateCylinder('clockBody', { diameter: 1, height: 0.1 }, scene)\n    clockBody.position = new Vector3(1.5, 3.0, -0.5)\n    clockBody.rotation = new Vector3(0, 0, Math.PI / 2)\n\n    const longHand = MeshBuilder.CreateCylinder('longHand', { diameter: 0.05, height: 0.5 }, scene)\n    longHand.position = new Vector3(1.4, 3.25, -0.5)\n    longHand.setPivotPoint(new Vector3(0, -0.25, 0))\n    longHand.rotation = new Vector3(Math.PI / 3, 0, 0)\n\n    const shortHand = MeshBuilder.CreateCylinder('shortHand', { diameter: 0.05, height: 0.3 }, scene)\n    shortHand.position = new Vector3(1.4, 3.15, -0.5)\n    shortHand.setPivotPoint(new Vector3(0, -0.15, 0))\n    shortHand.rotation = new Vector3(Math.PI / 3, 0, 0)\n\n    const tick = () => {\n      const now = new Date()\n      const hour = now.getHours()\n      const minute = now.getMinutes()\n\n      const longHandRotation = -2 * Math.PI * (minute / 60)\n      const shortHandRotation = -2 * Math.PI * (hour + (minute / 60)) / 12\n\n      longHand.rotation.x = longHandRotation\n      shortHand.rotation.x = shortHandRotation\n\n      setTimeout(tick, 1000)\n    }\n\n    tick()\n\n    engine.runRenderLoop(() => {\n      scene.render()\n    })\n\n    window.addEventListener('resize', () => {\n      engine.resize()\n    })\n  })\n\n  return (\n    <canvas ref={canvasElement} />\n  )\n}\n","export default __webpack_public_path__ + \"static/media/bone.b79991ed.gltf\";","import React, { useEffect, useRef } from 'react'\nimport { Engine, SceneLoader, HemisphericLight, ArcRotateCamera, Quaternion, Vector3, Color3, Color4 } from '@babylonjs/core'\nimport '@babylonjs/loaders/glTF'\nimport bone from '../assets/gltf/bone.gltf'\nimport { LoadingScreen } from '../lib/loading-screen'\nimport { useFullSize } from '../hooks/full-size'\n\nexport default function Bone() {\n  const { width, height } = useFullSize()\n\n  const canvasElement = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const engine = new Engine(canvasElement.current, true)\n    engine.loadingScreen = new LoadingScreen()\n    engine.setSize(width, height)\n\n    SceneLoader.Load(bone, undefined, engine, (scene) => {\n      scene.clearColor = Color4.FromHexString('#12345678')\n\n      const mesh = scene.getMeshByName('Box')\n\n      if (mesh?.skeleton) {\n        let angle = 0\n        const bones = mesh.skeleton.bones || []\n        const index = mesh.skeleton.getBoneIndexByName('Bone2')\n        const trasformNode = bones[index].getTransformNode()\n\n        scene.registerBeforeRender(function () {\n          Quaternion.FromEulerAnglesToRef(Math.sin(angle) / 2, Math.cos(angle), 0, trasformNode!.rotationQuaternion!)\n          angle += 0.1\n        })\n      }\n\n      const camera = new ArcRotateCamera('camera', 0, Math.PI / 3, 20, Vector3.Zero(), scene)\n      camera.lowerRadiusLimit = 20\n      camera.upperRadiusLimit = 20\n      camera.attachControl(canvasElement.current, true)\n\n      const light = new HemisphericLight('light', Vector3.Up(), scene)\n      light.diffuse = Color3.White()\n      light.groundColor = Color3.White()\n\n      engine.runRenderLoop(() => {\n        scene.render()\n      })\n    })\n\n    window.addEventListener('resize', () => {\n      engine.resize()\n    })\n  })\n\n  return (\n    <canvas ref={canvasElement} />\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Engine, Scene, Texture, HemisphericLight, ArcRotateCamera, PBRMetallicRoughnessMaterial, Vector3, Vector4, Color3, Color4, MeshBuilder } from '@babylonjs/core'\nimport '@babylonjs/loaders/glTF'\nimport { LoadingScreen } from '../lib/loading-screen'\nimport { useFullSize } from '../hooks/full-size'\nimport './can.css'\n\nexport default function Can() {\n  const { width, height } = useFullSize()\n\n  const canvasElement = useRef<HTMLCanvasElement>(null)\n  let scene = useRef<Scene>()\n  let pbr = useRef<PBRMetallicRoughnessMaterial>()\n\n  useEffect(() => {\n    const engine = new Engine(canvasElement.current, true)\n    engine.loadingScreen = new LoadingScreen()\n    engine.setSize(width, height)\n\n    scene.current = new Scene(engine)\n\n    const camera = new ArcRotateCamera(\"camera\", Math.PI / 2,  Math.PI / 2, 10, Vector3.Zero(), scene.current)\n    camera.lowerRadiusLimit = 2\n    camera.upperRadiusLimit = 20\n    camera.attachControl(canvasElement.current, true)\n\n    const light = new HemisphericLight(\"light\", Vector3.Up(), scene.current)\n    light.diffuse = Color3.White()\n    light.groundColor = Color3.White()\n\n    const faceUV = [\n      new Vector4(0, 0, 0, 0),\n      new Vector4(1, 0, 0, 1),\n      new Vector4(0, 0, 0, 0)\n    ]\n\n    const faceColors = [\n      Color4.FromHexString('#ffffffff'),\n      Color4.FromHexString('#ffffffff'),\n      Color4.FromHexString('#ffffffff')\n    ]\n\n    pbr.current = new PBRMetallicRoughnessMaterial(\"pbr\", scene.current)\n    pbr.current.metallic = 0.8\n    pbr.current.roughness = 0.3\n\n    const can = MeshBuilder.CreateCylinder('can', { height: 3, diameter: 2, tessellation: 32, faceUV, faceColors }, scene.current)\n    can.material = pbr.current\n\n    engine.runRenderLoop(() => {\n      scene.current?.render()\n    })\n\n    window.addEventListener('resize', () => {\n      engine.resize()\n    })\n  })\n\n  const onChangeFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const reader = new FileReader()\n    const files = event?.target?.files || []\n    const file = files[0]\n\n    if (file) {\n      reader.addEventListener('load', () => {\n        const data = reader.result!.toString()\n        if (pbr.current) {\n          pbr.current.baseTexture = new Texture(data, scene.current!)\n        }\n      }, false)\n\n      reader.readAsDataURL(file)\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <canvas ref={canvasElement} />\n      <input className=\"upload-button\" type=\"file\" accept=\"image/png,image/jpeg\" onChange={onChangeFile} />\n    </div>\n  )\n}\n","import React, { useEffect, useRef } from 'react'\nimport { Engine, Scene, HemisphericLight, DirectionalLight, ArcRotateCamera, PhysicsImpostor, MeshBuilder, StandardMaterial, AmmoJSPlugin, ShadowGenerator, Vector3, Color3, Color4 } from '@babylonjs/core'\nimport Ammo from 'ammojs-typed'\nimport { useFullSize } from '../hooks/full-size'\n\nexport default function Cloth() {\n  const { width, height } = useFullSize()\n\n  const canvasElement = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    window.onload = async () => {\n      await Ammo()\n\n      const engine = new Engine(canvasElement.current, true)\n      engine.setSize(width, height)\n\n      const scene = new Scene(engine)\n      scene.clearColor = Color4.FromHexString('#12345678')\n\n      scene.enablePhysics(null, new AmmoJSPlugin())\n\n      const camera = new ArcRotateCamera('camera', 0, Math.PI / 3, 20, Vector3.Zero(), scene)\n      camera.lowerRadiusLimit = 20\n      camera.upperRadiusLimit = 20\n      camera.attachControl(canvasElement.current, true)\n\n      new HemisphericLight('light', Vector3.Down(), scene)\n\n      const dirLight = new DirectionalLight('dir02', new Vector3(-0.2, -1, 0.2), scene)\n      dirLight.diffuse = Color3.White()\n      dirLight.intensity = 0.8\n      dirLight.position = new Vector3(0, 10, 0)\n\n      const cloth = MeshBuilder.CreateGround('cloth', { width: 5, height: 5, subdivisions: 30 }, scene)\n      const clothMaterial = new StandardMaterial('clothMaterial', scene)\n\n      clothMaterial.diffuseColor = Color3.FromHexString('#3CB371')\n\n      cloth.material = clothMaterial\n      cloth.receiveShadows = true\n      cloth.position.y = 7\n\n      cloth.physicsImpostor =  new PhysicsImpostor(cloth, PhysicsImpostor.ClothImpostor, { mass: 1, margin: 0.15, damping: 0.02, friction: 0.5, restitution: 1 }, scene)\n      cloth.physicsImpostor.velocityIterations = 10\n      cloth.physicsImpostor.positionIterations = 10\n      cloth.physicsImpostor.stiffness = 1\n\n      const sphere = MeshBuilder.CreateSphere('sphere', { diameter: 2 }, scene)\n      const sphereMaterial = new StandardMaterial('sphereMaterial', scene)\n\n      sphereMaterial.diffuseColor = Color3.FromHexString('#EEEEEE')\n\n      sphere.material = sphereMaterial\n      sphere.receiveShadows = true\n      sphere.position.z = 1\n      sphere.position.y = 2\n\n      sphere.physicsImpostor = new PhysicsImpostor(sphere, PhysicsImpostor.SphereImpostor, { mass: 0, friction: 0.5, restitution: 0 }, scene)\n\n      const shadowGenerator = new ShadowGenerator(2048, dirLight)\n\n      shadowGenerator.addShadowCaster(cloth)\n      shadowGenerator.addShadowCaster(sphere)\n\n      const ground = MeshBuilder.CreateGround('ground', { width: 20, height: 20 }, scene)\n      const groundMaterial = new StandardMaterial('groundMaterial', scene)\n\n      groundMaterial.diffuseColor = Color3.FromHexString('#DEB887')\n      groundMaterial.roughness = 1\n      groundMaterial.specularColor = Color3.Black()\n\n      ground.material = groundMaterial\n      ground.receiveShadows = true\n\n      ground.physicsImpostor = new PhysicsImpostor(ground, PhysicsImpostor.BoxImpostor, { mass: 0, friction: 0.5, restitution: 0 }, scene)\n\n      engine.runRenderLoop(() => {\n        scene.render()\n      })\n\n      window.addEventListener('resize', () => {\n        engine.resize()\n      })\n    }\n  })\n\n  return (\n    <canvas ref={canvasElement} />\n  )\n}\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Index from './pages/index'\nimport BasicGeometries from './pages/basic-geometries'\nimport Suzanne from './pages/suzanne'\nimport Clock from './pages/clock'\nimport Bone from './pages/bone'\nimport Can from './pages/can'\nimport Cloth from './pages/cloth'\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Index} />\n      <Route path=\"/basic-geometries\" component={BasicGeometries} />\n      <Route path=\"/suzanne\" component={Suzanne} />\n      <Route path=\"/clock\" component={Clock} />\n      <Route path=\"/bone\" component={Bone} />\n      <Route path=\"/can\" component={Can} />\n      <Route path=\"/cloth\" component={Cloth} />\n    </Switch>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}